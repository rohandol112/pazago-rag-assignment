/**
 * Mock Document Processor for Testing RAG without External Services
 * This allows you to test the RAG functionality locally without Pinecone
 */

import { Document } from '@langchain/core/documents';

export interface DocumentMetadata {
  source: string;
  year: number;
  pageNumber?: number;
  chunkIndex: number;
  totalChunks: number;
  documentType: 'shareholder_letter';
}

export class MockDocumentProcessor {
  private documents: Document[] = [];

  constructor() {
    // Initialize with sample documents
    this.initializeSampleDocuments();
  }

  private initializeSampleDocuments() {
    this.documents = [
      new Document({
        pageContent: "Warren Buffett has consistently advocated for long-term value investing, focusing on companies with strong competitive moats and excellent management teams. In his 2023 letter, he emphasized the importance of patience and discipline in investing, stating that 'time is the friend of the wonderful business, the enemy of the mediocre.'",
        metadata: {
          source: "2023-berkshire-hathaway-letter",
          year: 2023,
          chunkIndex: 0,
          totalChunks: 3,
          documentType: 'shareholder_letter'
        }
      }),
      new Document({
        pageContent: "Berkshire Hathaway's investment philosophy centers around buying wonderful businesses at fair prices rather than fair businesses at wonderful prices. This approach has served shareholders well over decades of market cycles. We look for businesses with enduring competitive advantages, strong management, and reasonable prices.",
        metadata: {
          source: "2022-berkshire-hathaway-letter", 
          year: 2022,
          chunkIndex: 0,
          totalChunks: 3,
          documentType: 'shareholder_letter'
        }
      }),
      new Document({
        pageContent: "Our policy regarding cryptocurrency remains unchanged: we do not view it as a productive asset. Unlike farms, apartment buildings, or businesses, Bitcoin produces nothing. Its value depends entirely on what others are willing to pay for it. We prefer investments that generate cash flows and have intrinsic value.",
        metadata: {
          source: "2023-berkshire-hathaway-letter",
          year: 2023, 
          chunkIndex: 1,
          totalChunks: 3,
          documentType: 'shareholder_letter'
        }
      }),
      new Document({
        pageContent: "Berkshire's acquisition strategy focuses on purchasing entire businesses with strong competitive positions, excellent management, and predictable earnings. We acquired significant stakes in Apple, which has become our largest equity holding, demonstrating the power of owning great businesses for extended periods.",
        metadata: {
          source: "2021-berkshire-hathaway-letter",
          year: 2021,
          chunkIndex: 0,
          totalChunks: 2,
          documentType: 'shareholder_letter'
        }
      }),
      new Document({
        pageContent: "Market volatility is inevitable, but it creates opportunities for patient investors. During the 2020 market decline, we remained disciplined and focused on our core principles. Panic selling by others often creates buying opportunities for those with strong balance sheets and long-term perspectives.",
        metadata: {
          source: "2020-berkshire-hathaway-letter",
          year: 2020,
          chunkIndex: 0,
          totalChunks: 2,
          documentType: 'shareholder_letter'
        }
      }),
      new Document({
        pageContent: "Management quality is perhaps the most important factor in our investment decisions. We look for leaders who are passionate about their businesses, treat shareholders as partners, and make decisions based on long-term value creation rather than short-term metrics or stock price movements.",
        metadata: {
          source: "2022-berkshire-hathaway-letter",
          year: 2022,
          chunkIndex: 1,
          totalChunks: 3,
          documentType: 'shareholder_letter'
        }
      }),
      new Document({
        pageContent: "Diversification is protection against ignorance, but for those who know what they're doing, it makes little sense. We prefer to concentrate our investments in businesses we understand thoroughly. Our concentrated approach has served us well, though it requires deep knowledge and conviction.",
        metadata: {
          source: "2023-berkshire-hathaway-letter",
          year: 2023,
          chunkIndex: 2,
          totalChunks: 3,
          documentType: 'shareholder_letter'
        }
      }),
      new Document({
        pageContent: "The insurance business remains central to Berkshire's success. Float generated by our insurance operations provides permanent, cost-free capital that we can invest for the long term. GEICO, our largest insurance subsidiary, continues to provide excellent value to customers while generating substantial profits.",
        metadata: {
          source: "2021-berkshire-hathaway-letter",
          year: 2021,
          chunkIndex: 1,
          totalChunks: 2,
          documentType: 'shareholder_letter'
        }
      })
    ];
  }

  /**
   * Mock vector search using simple text matching
   */
  async similaritySearch(query: string, k: number = 5, filter?: any): Promise<Document[]> {
    const queryLower = query.toLowerCase();
    
    // Simple scoring based on keyword matches
    const scoredDocuments = this.documents.map(doc => {
      const contentLower = doc.pageContent.toLowerCase();
      let score = 0;
      
      // Count keyword matches
      const queryWords = queryLower.split(' ').filter(word => word.length > 2);
      queryWords.forEach(word => {
        const matches = (contentLower.match(new RegExp(word, 'g')) || []).length;
        score += matches;
      });
      
      // Boost score for exact phrase matches
      if (contentLower.includes(queryLower)) {
        score += 5;
      }
      
      return { doc, score };
    });
    
    // Filter by year if specified
    let filteredDocs = scoredDocuments;
    if (filter?.year?.$eq) {
      filteredDocs = scoredDocuments.filter(item => 
        item.doc.metadata.year === filter.year.$eq
      );
    }
    
    // Sort by score and return top k results
    return filteredDocs
      .sort((a, b) => b.score - a.score)
      .slice(0, k)
      .map(item => item.doc);
  }

  /**
   * Mock vector search with scores
   */
  async similaritySearchWithScore(query: string, k: number = 5, filter?: any): Promise<[Document, number][]> {
    const queryLower = query.toLowerCase();
    
    // Simple scoring based on keyword matches
    const scoredDocuments = this.documents.map(doc => {
      const contentLower = doc.pageContent.toLowerCase();
      let score = 0;
      
      // Count keyword matches
      const queryWords = queryLower.split(' ').filter(word => word.length > 2);
      queryWords.forEach(word => {
        const matches = (contentLower.match(new RegExp(word, 'g')) || []).length;
        score += matches * 0.1;
      });
      
      // Boost score for exact phrase matches
      if (contentLower.includes(queryLower)) {
        score += 0.8;
      }
      
      // Normalize score to 0-1 range
      score = Math.min(score, 1.0);
      
      return { doc, score };
    });
    
    // Filter by year if specified
    let filteredDocs = scoredDocuments;
    if (filter?.year?.$eq) {
      filteredDocs = scoredDocuments.filter(item => 
        item.doc.metadata.year === filter.year.$eq
      );
    }
    
    // Sort by score and return top k results with scores
    return filteredDocs
      .sort((a, b) => b.score - a.score)
      .slice(0, k)
      .map(item => [item.doc, item.score]);
  }

  /**
   * Get the mock vector store interface
   */
  async getVectorStore(): Promise<MockVectorStore> {
    return new MockVectorStore(this);
  }
}

export class MockVectorStore {
  constructor(private processor: MockDocumentProcessor) {}

  async similaritySearch(query: string, k?: number, filter?: any): Promise<Document[]> {
    return this.processor.similaritySearch(query, k, filter);
  }

  async similaritySearchWithScore(query: string, k?: number, filter?: any): Promise<[Document, number][]> {
    return this.processor.similaritySearchWithScore(query, k, filter);
  }
}